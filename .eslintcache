[{"/Users/oscar/development/roto-front/GlobalWebViewProps.ts":"1","/Users/oscar/development/roto-front/contexts/WebContext.ts":"2","/Users/oscar/development/roto-front/screens/RootStackParams.ts":"3","/Users/oscar/development/roto-front/screens/Forum/ForumInjectCode.ts":"4","/Users/oscar/development/roto-front/screens/SignIn/SignInInjectCode.ts":"5"},{"size":843,"mtime":1647520406793},{"size":243,"mtime":1647520406794,"results":"6","hashOfConfig":"7"},{"size":116,"mtime":1647520406801,"results":"8","hashOfConfig":"7"},{"size":1753,"mtime":1647520406800,"results":"9","hashOfConfig":"7"},{"size":656,"mtime":1647520406801,"results":"10","hashOfConfig":"7"},{"filePath":"11","messages":"12","suppressedMessages":"13","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"nlx7j0",{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/oscar/development/roto-front/contexts/WebContext.ts",["23"],[],"/Users/oscar/development/roto-front/screens/RootStackParams.ts",[],[],"/Users/oscar/development/roto-front/screens/Forum/ForumInjectCode.ts",[],[],"/Users/oscar/development/roto-front/screens/SignIn/SignInInjectCode.ts",[],[],{"ruleId":"24","severity":2,"message":"25","line":4,"column":52,"nodeType":"26","messageId":"27","endLine":4,"endColumn":54},"@typescript-eslint/ban-types","Don't use `{}` as a type. `{}` actually means \"any non-nullish value\".\n- If you want a type meaning \"any object\", you probably want `Record<string, unknown>` instead.\n- If you want a type meaning \"any value\", you probably want `unknown` instead.\n- If you want a type meaning \"empty object\", you probably want `Record<string, never>` instead.","TSTypeLiteral","bannedTypeMessage"]